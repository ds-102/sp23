import sys
from typing import List

import pandas as pd

PREAMBLE = """
# This file contains the lectures and their associated information in
# chronological order. Note that the week and lecture numbers are automatically
# generated by the code in syllabus_entries.html.
#
# The schema for a lecture entry is:
#
#
# - date: Date of the lecture
#   topic: Title of the lecture
#   description: Longer description of lecture content
#   slides: url to the lecture slide
#   video: url for lecture video(s)
#   resources: markdown text for resources
#   lab: ...
#   discussion: ...
#   homework: ...
#   project: ...
"""
TOPICS = [
    "Course Overview",
    "Decisions I: Binary Decision-Making",
    "Decisions II: P-Values and Multiple Hypothesis Testing",
    "Decisions III: Online False Discovery Rate Control & ROC curves",
    "Decisions IV: Frequentist vs. Bayesian Decision-Making",
    "Bayesian Modeling I: Overview of Bayesian Modeling",
    "Bayesian Modeling II: Graphical Models",
    "Bayesian Modeling III: Rejection Sampling and Markov Chains",
    "Bayesian Modeling IV: Markov Chain Monte Carlo (MCMC) and Gibbs Sampling",
    "GLMs I: Regression and GLMs",
    "GLMs II: Model checking for GLMs",
    "GLMs III: Uncertainty quantification for GLMs",
    "Midterm I (no lecture)",
    "Nonparametric Methods and Neural Networks",
    "Neural Networks and Interpretability",
    "Causal Inference I: Association and Causation",
    "Causal Inference II: Randomized Experiments",
    "Causal Inference III: Observational Studies",
    "Concentration inequalities",
    "Bandits I",
    "Spring break",
    "Spring break",
    "Bandits II",
    "Reinforcement Learning 1",
    "Reinforcement Learning 2",
    "Midterm II (no lecture)",
    "Matching Markets and Game Theory",
    "Differential Privacy",
    "Robustness and generalization",
    "Course Wrap-up"
]


def generate_schedule(start_date: str, end_date: str, topics: List[str]):
    days = pd.date_range(start_date, end_date)
    days = days[days.dayofweek.isin({1, 3})]
    num_days = len(days)
    num_topics = len(topics)
    if num_days != num_topics:
        raise ValueError(
            f"You gave {num_days} days and {num_topics} topics"
        )
    lectures = [PREAMBLE]
    for d, topic in zip(days, topics):
        date = d.strftime('%A %m/%d/%y')
        lectures.append(f"- date: {date}\n  topic: {topic}")
    lecture_yml = '\n\n'.join(lectures)
    with open('lectures.yml', 'w') as f:
        f.write(lecture_yml)


if __name__ == '__main__':
    generate_schedule(sys.argv[1], sys.argv[2], TOPICS)
    print("Generated lectures.yml. Check it and move to _data folder")
